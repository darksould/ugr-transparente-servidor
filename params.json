{
  "name": "Ugr-transparente-servidor",
  "tagline": "Servidor de transparente.ugr.es",
  "body": "# UGR Transparente\r\n_Version 0.9_     \r\n[![Build Status](https://travis-ci.org/oslugr/ugr-transparente-servidor.svg?branch=master)](https://travis-ci.org/oslugr/ugr-transparente-servidor)\r\n[![Coverage Status](https://coveralls.io/repos/github/oslugr/ugr-transparente-servidor/badge.svg?branch=master)](https://coveralls.io/github/oslugr/ugr-transparente-servidor?branch=master)\r\n[![Dependency Status](https://gemnasium.com/oslugr/ugr-transparente-servidor.svg)](https://gemnasium.com/oslugr/ugr-transparente-servidor)\r\n[![License Status](https://img.shields.io/badge/license-GPL%203.0-blue.svg)](http://www.gnu.org/licenses/gpl-3.0.en.html)\r\n[![Node](https://img.shields.io/badge/node-4.2.6-blue.svg)](https://nodejs.org/en/)\r\n[![Code Climate](https://codeclimate.com/github/oslugr/ugr-transparente-servidor/badges/gpa.svg)](https://codeclimate.com/github/oslugr/ugr-transparente-servidor)\r\n\r\n-------------------\r\n\r\n\r\nPortal de transparencia de la [UGR](http://www.ugr.es/) para publicar los datos y hacerlos accesibles y tratables. Desarrollado con [Node.js](http://nodejs.org/) y [Express](http://expressjs.com/).\r\n\r\nLa aplicación es accesible desde <http://transparente.ugr.es>.\r\n\r\n## Instalación\r\n\r\n1. En caso de no tener instalado `git`:   \r\n    ```\r\n    sudo apt-get install git\r\n    ```\r\n\r\n2. Instalamos **Node.js**:\r\n    ```\r\n    wget -qO- https://deb.nodesource.com/setup_4.x | sudo bash -\r\n    sudo apt-get install -y nodejs\r\n    ```\r\n    Comprobamos que **Node.js** y **NPM** (su gestor de paquetes) se han instalado correctamente.\r\n    ```\r\n    node -v\r\n    npm -v\r\n    ```\r\n\r\n3. Descargamos todo el contenido del repositorio para poder ejecutar la aplicación.\r\n    ```\r\n    git clone https://github.com/oslugr/ugr-transparente-servidor.git\r\n    ```\r\n\r\n4. Instalamos todas las dependencias de la aplicación:\r\n```\r\ncd ugr-transparente-servidor\r\nsudo npm install\r\n```\r\n\r\n5. Finalmente iniciamos la aplicación:\r\n    ```\r\n    npm start\r\n    ```\r\n\r\n6. Igualmente podemos reiniciar o detener la aplicación de una forma similar:\r\n    ```\r\n    npm restart|stop\r\n    ```\r\n\r\n## Provisionamiento\r\nTambién podemos instalar la aplicación automáticamente aprovisionando el servidor con todo lo necesario mediante [Ansible](http://www.ansible.com/home).\r\n\r\n```\r\nsudo apt-get install ansible\r\n```\r\n\r\n1. El archivo `ansible_hosts` dentro de la carpeta `provisioning` contiene la dirección del servidor; esta dirección puede ser una dirección IP o una dirección URL.\r\n    ```\r\n    [transparente]\r\n    transparente.ugr.es\r\n    ```\r\n\r\n2. Comprobamos que tenemos conexión SSH con el servidor.\r\n    ```\r\n    ANSIBLE_HOSTS=provisioning/ansible_hosts ansible transparente -u USUARIO -m ping\r\n    ```\r\n    Si el acceso es correcto la respuesta del servidor será la siguiente:\r\n    ```\r\n    transparente.ugr.es | success >> {\r\n        \"changed\": false,\r\n        \"ping\": \"pong\"\r\n    }\r\n    ```\r\n\r\n3. Para ejecutar el provisionamiento Ansible recibirá como variable de entorno la ruta del `ansible_hosts` (`ANSIBLE_HOSTS=provisioning/ansible_hosts`) y como parámetro el usuario con el que accederemos al servidor (`--extra-vars \"user=USUARIO\"`). El archivo `provisioning/transparente.yml` es el **playbook**, el archivo de instrucciones que **Ansible** seguirá para saber que tareas tiene que llevar a cabo durante el provisionamiento.\r\n    ```\r\n    ANSIBLE_HOSTS=provisioning/ansible_hosts ansible-playbook provisioning/transparente.yml --extra-vars \"user=USUARIO\"\r\n    ```\r\n\r\n## Testing\r\nSe incluyen diversos tests unitarios y de integración, así como análisis de covertura usando las herramientas [mocha](https://mochajs.org/), [chai](http://chaijs.com/) e [istanbul](https://github.com/gotwarlost/istanbul), ejecuta los tests con el comando:    \r\n```\r\nnpm test\r\n```\r\n\r\nEl resultado de los tests unitarios se mostrarán por pantalla como salida de la ejecución, los resultados de los tests de cobertura se mostrarán en `coverage/lcov-report/index.html`.\r\n\r\n## Documentación\r\nPara generar automáticamente la documentación con groc ejecutar `npm run doc`. esta documentación se encontrará en `doc/index.html`.\r\n\r\n## Integración continua\r\nDisponemos de un sistema de integración continua con [Travis CI](https://travis-ci.org/), que desplegará el sistema y ejecutará los tests con cada cambio del repositorio, el estado actual del sistema se puede observar a continuación:\r\n* **master:** [![Build Status](https://travis-ci.org/oslugr/ugr-transparente-servidor.svg?branch=master)](https://travis-ci.org/oslugr/ugr-transparente-servidor)\r\n* **dev:** [![Build Status](https://travis-ci.org/oslugr/ugr-transparente-servidor.svg?branch=dev)](https://travis-ci.org/oslugr/ugr-transparente-servidor)\r\n\r\nLa integración continua, además, ejecutará diversas herramientas con las que obtenemos información sobre cobertura, dependencias y calidad del código:    \r\n[![Coverage Status](https://coveralls.io/repos/github/oslugr/ugr-transparente-servidor/badge.svg?branch=master)](https://coveralls.io/github/oslugr/ugr-transparente-servidor?branch=master)\r\n[![Dependency Status](https://gemnasium.com/oslugr/ugr-transparente-servidor.svg)](https://gemnasium.com/oslugr/ugr-transparente-servidor)\r\n[![Code Climate](https://codeclimate.com/github/oslugr/ugr-transparente-servidor/badges/gpa.svg)](https://codeclimate.com/github/oslugr/ugr-transparente-servidor)\r\n\r\n## Despliegue automático\r\nCuando hagamos cambios en nuestra aplicación y queramos aplicarlos en el servidor, no es necesario que accedamos a él manualmente y apliquemos dichos cambios, podemos usar [Flightplan](https://github.com/pstadler/flightplan) para hacer esto automáticamente.\r\n\r\nSi queremos utilizar **Flightplan** para el despliegue automático es necesario que tengamos nuestra clave SSH copiada en el servidor como hicimos para el provisionamiento.\r\n\r\n```\r\nssh-copy-id USUARIO@transparente.ugr.es\r\n```\r\n\r\nEl archivo en el que hemos definido la configuración para el despliegue automático es `flightplan.js`. Podemos diferenciar dos partes esenciales: `plan.target` y `plan.remote`; el primero indica los parámetros para acceder al servidor, el segundo indica las tareas a realizar durante el despliegue. Solo falta dar a **Flightplan** la orden de despliegue automático, donde `USUARIO` es el usuario con permisos de superusuario con el que accederemos al servidor:\r\n\r\n```\r\nUSER=USUARIO npm run deploy\r\n```\r\n\r\n# Estructura de la aplicación\r\n## Archivos en raíz\r\nLa aplicación se encuentra estructurada de forma similar a cualquier proyecto de node.js:\r\n* `README.md`, `LICENSE`, `.git` y `.gitignore`:  Archivos del repositorio **git**\r\n* `.tavis.yml`: Archivo de configuración de Travis\r\n* `package.json`: Información de la aplicación y dependencias\r\n* `bower.json`, `getRecursos.sh`, `flightplan.js`: Archivos de despliegue\r\n* `app.js`: Archivo principal de la aplicación\r\n* `app/`: Archivos del programa\r\n    * `app/routes/`: Archivos de enrutamiento de las páginas de la aplicación\r\n* `config/`: Archivos de configuración de la aplicación\r\n* `public/`: Archivos públicos del portal\r\n* `views/`: Vistas de las paginas con [Jade](http://jade-lang.com/)\r\n* `test/`: Archivos de tests unitarios y de integración\r\n* `provisioning/`: Archivos de provisionamiento\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}